description: Build and deploy the codebase to a WP Engine environment

parameters:
    environment:
        description: |
            Are we deploying to the production, staging, development, or custom environment?
            Production, staging, and development need a corresponding environment variable defined
            in CircleCI's project configuration. An optional `./.gitignores/__deployment`
            file can be used to deploy build files rather than source files.
        type: string

    rollbar_token:
        description: API token for accessing Rollbar
        type: env_var_name
        default: ROLLBAR_ACCESS_TOKEN

    regression_enabled:
        description: |
            Should we try to approve a regression workflow?
            If you have a regression workflow that runs in parallel to your deploy workflows,
            set this to be true. The regression workflow's "hold for approval" job will be approved
            once the deploy finishes.
        type: boolean
        default: false

    regression_workflow:
        description: Name of the regression workflow that needs approved
        type: string
        default: regression

    regression_job:
        description: Name of the job that needs approved
        type: string
        default: hold-for-deploy

    pipeline_id:
        description: Pipeline ID from the job. The orb can't access the ID directly for security reasons
        type: string
        default: "00000000-0000-0000-0000-000000000001"


executor: php

steps:
    - attach_workspace:
          at: /home/circleci/project

    - run:
          name: Install production composer dependencies
          command: |
              if [ -f composer.lock ]; then
                  composer install --no-dev --no-ansi --no-interaction --no-progress --optimize-autoloader --prefer-dist
              fi

    # npm prune --production to clean out devDependencies
    # See https://github.com/yarnpkg/yarn/issues/696
    - run:
          name: Install production yarn dependencies
          command: |
              if [ -f yarn.lock ]; then
                  npm prune --production
              fi

    # Add the git.wpengine.com fingerprint to our known hosts
    # We need to interact with this server. And the unknown host will trigger an interactive prompt.
    # The workaround is to manually add the fingerprint ourselves.
    # Note: This will need updated if and when WP Engine updates the fingerprint
    - run:
          name: Add deploy host to known_hosts
          command: mkdir -p ~/.ssh && ssh-keyscan -t rsa -H git.wpengine.com >> ~/.ssh/known_hosts

    # Set up our WPE_Install based on the environment
    - find_wpe_install:
          environment: << parameters.environment >>

    # Set up the git remotes for WP Engine
    - run:
          name: Set up the WP Engine install git remotes
          command: |
              git config --global user.email "deploy@circleci.local"
              git config --global user.name "$CIRCLE_PROJECT_REPONAME"
              git remote add wpe "git@git.wpengine.com:production/${WPE_INSTALL}.git"
              git fetch wpe

    # Commit our build version of the code
    - run:
          name: Check out a new branch
          command: git checkout -b "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"

    - gitignoreswap:
          gitignore_type: site

    - when:
          condition: << parameters.rollbar_token >>
          steps:
              - rollbar/notify_deploy_started:
                    environment: << parameters.environment >>

    - deploy:
          name: Push to WPE environment
          command: |
              git push wpe  "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
              git push wpe ":${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"

    - when:
          condition: << parameters.rollbar_token >>
          steps:
              - rollbar/notify_deploy_finished:
                    status: succeeded
                    deploy_id: ${ROLLBAR_DEPLOY_ID}

    - when:
          condition: << parameters.regression_enabled >>
          steps:
              - approve_hold_for_deploy:
                    regression_workflow: << parameters.regression_workflow >>
                    regression_job: << parameters.regression_job >>
                    pipeline_id: << parameters.pipeline_id >>
